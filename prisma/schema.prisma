// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

enum MediaType { // TODO: remplacer ça par le type mime
  IMAGE
  VIDEO
}

model Media {
  id         String      @id @default(cuid())
  type       MediaType
  url        String      @db.Text // TODO: Remplacer ça, non pas par une URL, mais par un chemin d'accès à la ressource
  wineMedias WineMedia[]
  userMedias UserMedia[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         UserMedia?
  accounts      Account[]
  sessions      Session[]
  wines         Wine[]
}

model UserMedia {
  media Media    @relation(fields: [mediaId], references: [id])
  mediaId String
  user User?     @relation(fields: [userId], references: [id])
  userId String  @unique

  @@id([mediaId, userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WineCharacteristic {
  id    String                      @id @default(cuid())
  name  String
  wines WineCharacteristicsOnWines[]
}

model Wine {
  id                 String                        @id @default(cuid())
  name               String
  description        String?                       @db.Text
  wineCharacteristics WineCharacteristicsOnWines[]
  medias             WineMedia[]
  rating             Int?
  isFavorite         Boolean
  user               User                          @relation(fields: [userId], references: [id])
  userId             String
  // TODO: Rating sur 10
  // TODO: Voir pour le isFavorite, peut-être un isPinned
  // TODO: Il faudra aussi permettre d'ajouter les informations dans plusieurs langues
  // TODO: Ce que je vais faire dans un premier temps, c'est ajouter un bloc de texte libre pour ajouter des infos
}

model WineMedia {
  media   Media  @relation(fields: [mediaId], references: [id])
  mediaId String
  wine    Wine   @relation(fields: [wineId], references: [id])
  wineId  String

  @@id([mediaId, wineId])
}

model WineCharacteristicsOnWines {
  wine                Wine              @relation(fields: [wineId], references: [id])
  wineId              String
  wineCharacteristic   WineCharacteristic @relation(fields: [wineCharacteristicId], references: [id])
  wineCharacteristicId String

  @@id([wineId, wineCharacteristicId])
}
