// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

// based on https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types/Common_types
enum MediaMimeType {
  APPLICATION_OCTET_STREAM
  IMAGE_BMP
  IMAGE_GIF
  IMAGE_JPEG
  IMAGE_PNG
  IMAGE_WEBP
}

model Media {
  id               String        @id @default(cuid())
  mimeType         MediaMimeType
  path             String        @db.Text
  originalFileName String?
  user             User?         @relation(fields: [userId], references: [id])
  userId           String?
  wine             Wine?         @relation(fields: [wineId], references: [id])
  wineId           String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  medias        Media[]
  accounts      Account[]
  sessions      Session[]
  wines         Wine[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model WineCharacteristic {
  id    String                       @id @default(cuid())
  name  String
  icon  String?                      @db.TinyText
  wines WineCharacteristicsOnWines[]
}

model Wine {
  id                  String                        @id @default(cuid())
  name                String?
  description         String?                       @db.Text
  wineCharacteristics WineCharacteristicsOnWines[]
  medias              Media[]
  rating              Int?
  isPinned            Boolean
  country             String?                       @db.VarChar(2)
  region              String?                       @db.TinyText
  additionalInformation String?                     @db.Text
  user                User                          @relation(fields: [userId], references: [id])
  userId              String
  // TODO: Il faudra aussi permettre d'ajouter les informations dans plusieurs langues
}

model WineCharacteristicsOnWines {
  wine                Wine              @relation(fields: [wineId], references: [id])
  wineId              String
  wineCharacteristic   WineCharacteristic @relation(fields: [wineCharacteristicId], references: [id])
  wineCharacteristicId String

  @@id([wineId, wineCharacteristicId])
}
